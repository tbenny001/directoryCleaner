//////////////////////////////////////NOTES////////////////////////////////////////////////////
/* METHODS THAT HAVE WORKED FOR FILE COMPARISON */

/*This method converts the files in to byte arrays and then appends them to the global array. This may be too memory intensive though... */
//    Path path1 = Paths.get("/home/tony/Desktop/practiceFile/blah1");
//    Path path2 = Paths.get("/home/tony/Desktop/practiceFile/blah2");
//    byte[] file1Arr;
//    byte[] file2Arr;
//        try {
//                file1Arr = Files.readAllBytes(path1);
//                file2Arr = Files.readAllBytes(path2);
//                boolean isSame = true;
//                for(int i = 0; i < file1Arr.length; i++) {
//        if(file1Arr[i] != file2Arr[i]) isSame = false;
//        }
//        System.out.println(isSame);
//        } catch(IOException e) {
//        System.err.println(e.getStackTrace());
//        }

/*This method generates the hash of each file and compares them. May be a bit more computationally expensive but saves space */
//Path path1 = Paths.get("/home/tony/Desktop/practiceFile/blah1");
//        Path path2 = Paths.get("/home/tony/Desktop/practiceFile/blah2");
//        try {
//            MessageDigest md = MessageDigest.getInstance("SHA-1");
//            md.update(Files.readAllBytes(path1));
//            byte[] f1SHA1 = md.digest();
//            md.reset();
//            md.update(Files.readAllBytes(path2));
//            byte[] f2SHA1 = md.digest();
//            boolean isSame = true;
//            for(int i = 0; i < f1SHA1.length; i++)
//                if(f1SHA1[i] != f2SHA1[i]) isSame = false;
//            System.out.println(isSame);
//
//        } catch (NoSuchAlgorithmException e) {
//            e.printStackTrace();
//        } catch (IOException e) {
//            e.printStackTrace();
//        }

/* METHODS THAT HAVENT WORKED FOR FILE COMPARISON*/

/*File equality is false. Bytes may be different?*/
//        try {
//            FileInputStream stream1 = new FileInputStream(file1);
//            FileInputStream stream2 = new FileInputStream(file1);
//            stream1.read(file1Arr);
//            stream2.read(file2Arr);
//            stream1.close();
//            stream2.close();
//
//            System.out.println(file1Arr.equals(file2Arr));
//
//        } catch(FileNotFoundException e) {
//            System.err.println(e);
//        } catch (IOException e) {
//            e.printStackTrace();
//        }

//    boolean isSame = true;
//            for(int i = 0; i < file1Arr.length; i++) {
//        if(file1Arr[i] != file2Arr[i]) isSame = !isSame; THIS LINE RETURNS TRUE. WHY?
//        }

/*
Method for deleting duplicates: Keep global array of file checksums. Assuming the file passes age check and doesnt get deleted,
 if the file is a newly encountered file, store it into to array. Compare each new file's checksums with checksums preexisting
 in array. If they match, delete current file.
 Question: Should I store files or checksum? If checksum has to be calculated and is computationally expensive, store in file form.
 But would storing in file form be expensive memory-wise?
 */
